{"version":3,"sources":["LocationPin.jsx","App.js","serviceWorker.js","index.js"],"names":["LocationPin","text","toggle","className","icon","locationIcon","Marker","children","Boolean","window","location","hostname","match","ReactDOM","render","mapRef","useRef","useState","bounds","setBounds","zoom","setZoom","setToggle","points","data","rules","map","crime","type","properties","cluster","crimeId","lat","category","name","address","geometry","coordinates","parseFloat","lng","useSupercluster","options","radius","maxZoom","clusters","supercluster","style","height","width","bootstrapURLKeys","key","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","current","loadGeoJson","onChange","nw","se","longitude","latitude","isCluster","pointCount","point_count","id","txt","length","onClick","expansionZoom","Math","min","getClusterExpansionZoom","panTo","src","alt","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"209DAgBeA,EAZK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAuB,OAAL,EAAbC,OAEhB,yBAAKC,UAAU,OAEX,kBAAC,OAAD,CAAMC,KAAMC,IAAcF,UAAU,aACpC,uBAAGA,UAAU,YAAYF,IAG9B,MCFLK,EAAS,SAAC,GAAD,SAAGC,UCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFMD,WACb,IAAMC,EAASC,mBADa,EAEAC,mBAAS,MAFT,mBAErBC,EAFqB,KAEbC,EAFa,OAGJF,mBAAS,IAHL,mBAGrBG,EAHqB,KAGfC,EAHe,OAIDJ,oBAAS,GAJR,mBAIrBf,EAJqB,KAIdoB,EAJc,KAWtBC,EAFGC,EAAKC,MAEKC,KAAI,SAAAC,GAAK,MAAK,CAC/BC,KAAM,UACNC,WAAY,CAAEC,SAAS,EAAOC,QAASJ,EAAMK,IAAKC,SAAWN,EAAMO,KAAO,IAAMP,EAAMQ,SACtFC,SAAU,CACRR,KAAM,QACNS,YAAa,CACXC,WAAWX,EAAMY,KACjBD,WAAWX,EAAMK,WAlBK,EA4BOQ,YAAgB,CACjDjB,SACAL,SACAE,OACAqB,QAAS,CAAEC,OAAQ,GAAIC,QAAS,MAJ1BC,EA5BoB,EA4BpBA,SAAUC,EA5BU,EA4BVA,aAOlB,OACE,yBAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACpC,kBAAC,IAAD,CACEC,iBAAkB,CAAEC,IAAK,2CACzBC,cAAe,CAAE,IAAO,WAAY,KAAQ,YAC5CC,YAAa,GACbC,oCAAkC,EAClCC,kBAAmB,YAAc,IAAX5B,EAAU,EAAVA,IACpBX,EAAOwC,QAAU7B,EAEhBA,EAAIF,KAAKgC,YAAY,oFAGxBC,SAAU,YAAuB,IAApBrC,EAAmB,EAAnBA,KAAMF,EAAa,EAAbA,OACjBG,EAAQD,GACRD,EAAU,CACRD,EAAOwC,GAAGnB,IACVrB,EAAOyC,GAAG3B,IACVd,EAAOyC,GAAGpB,IACVrB,EAAOwC,GAAG1B,QAIbY,EAASlB,KAAI,SAAAI,GAAY,IAAD,cACOA,EAAQM,SAASC,YADxB,GAChBuB,EADgB,KACLC,EADK,OAKnB/B,EAAQD,WAFDiC,EAHY,EAGrBhC,QACaiC,EAJQ,EAIrBC,YAGF,OAAIF,EAEA,kBAACxD,EAAD,CACE4C,IAAG,kBAAapB,EAAQmC,IACxBjC,IAAK6B,EACLtB,IAAKqB,EACLM,IAAMpC,EAAQD,WAAWK,MAEzB,yBACE/B,UAAU,iBACV2C,MAAO,CACLE,MAAM,GAAD,OAAK,GAAMe,EAAaxC,EAAO4C,OAAU,GAAzC,MACLpB,OAAO,GAAD,OAAK,GAAMgB,EAAaxC,EAAO4C,OAAU,GAAzC,OAERC,QAAS,WACP,IAAMC,EAAgBC,KAAKC,IACzB1B,EAAa2B,wBAAwB1C,EAAQmC,IAC7C,IAEFlD,EAAOwC,QAAQlC,QAAQgD,GACvBtD,EAAOwC,QAAQkB,MAAM,CAAEzC,IAAK6B,EAAUtB,IAAKqB,MAG5CG,IAOT,kBAACzD,EAAD,CACI4C,IAAG,gBAAWpB,EAAQD,WAAWE,SACjCC,IAAK6B,EACLtB,IAAKqB,GAEP,4BAAQQ,QAAS,WA5EhB9C,GAATpB,IA4E8CC,UAAU,gBAC9C,yBAAKuE,IAAI,YAAYC,IAAI,uBAE3B,kBAAC,EAAD,CAAa1E,KAAM6B,EAAQD,WAAWI,SAAU/B,OAAQA,YE7GpD,MAAS0E,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94bf8de1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Icon } from '@iconify/react'\r\nimport locationIcon from '@iconify/icons-mdi/map-marker'\r\n\r\nconst LocationPin = ({ text,toggle }) => {    if(toggle)\r\n        return (\r\n            <div className=\"pin\">\r\n\r\n                <Icon icon={locationIcon} className=\"pin-icon\"/>\r\n                <p className=\"pin-text\">{text}</p>\r\n            </div>\r\n        )\r\n    return null\r\n    }\r\n\r\n\r\nexport default LocationPin\r\n","import React, { useState, useRef } from \"react\";\r\nimport useSwr from \"swr\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport useSupercluster from \"use-supercluster\";\r\nimport \"./App.css\";\r\nimport data from './counties.json'\r\nimport LocationPin from \"./LocationPin\";\r\n\r\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\r\n\r\nconst Marker = ({ children }) => children;\r\n\r\nexport default function App() {\r\n  const mapRef = useRef();\r\n  const [bounds, setBounds] = useState(null);\r\n  const [zoom, setZoom] = useState(10);\r\n  const [toggle,setToggle] = useState(false);\r\n /* const url =\r\n    \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\r\n  const { data, error } = useSwr(url, { fetcher });*/\r\n   let error = false;\r\n  let fin= data.rules;\r\n  //const crimes = fin && !error ? fin.slice(0, 2000) : [];\r\n  const points = fin.map(crime => ({\r\n    type: \"Feature\",\r\n    properties: { cluster: false, crimeId: crime.lat, category:( crime.name + \" \" + crime.address)},\r\n    geometry: {\r\n      type: \"Point\",\r\n      coordinates: [\r\n        parseFloat(crime.lng),\r\n        parseFloat(crime.lat)\r\n      ]\r\n    }\r\n  }));\r\n\r\n  function handleClick() {\r\n    toggle ? setToggle(false): setToggle(true);\r\n  }\r\n\r\n\r\n  const { clusters, supercluster } = useSupercluster({\r\n    points,\r\n    bounds,\r\n    zoom,\r\n    options: { radius: 75, maxZoom: 20 }\r\n  });\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100%\" }}>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: 'AIzaSyDzpOEdm2D6s9gp8ee-NjFobM1sZnzs7cI'}}\r\n        defaultCenter={{ \"lat\": 35.8031909, \"lng\": -78.5660852}}\r\n        defaultZoom={10}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onGoogleApiLoaded={({ map }) => {\r\n          mapRef.current = map;\r\n          https://services1.arcgis.com/4yjifSiIG17X0gW4/arcgis/rest/services/SES_indicators/FeatureServer/1\r\n           map.data.loadGeoJson('https://opendata.arcgis.com/datasets/34acbf4a26784f189c9528c1cf317193_0.geojson')\r\n\r\n        }}\r\n        onChange={({ zoom, bounds }) => {\r\n          setZoom(zoom);\r\n          setBounds([\r\n            bounds.nw.lng,\r\n            bounds.se.lat,\r\n            bounds.se.lng,\r\n            bounds.nw.lat\r\n          ]);\r\n        }}\r\n      >\r\n        {clusters.map(cluster => {\r\n          const [longitude, latitude] = cluster.geometry.coordinates;\r\n          const {\r\n            cluster: isCluster,\r\n            point_count: pointCount,\r\n          } = cluster.properties;\r\n\r\n          if (isCluster) {\r\n            return (\r\n              <Marker\r\n                key={`cluster-${cluster.id}`}\r\n                lat={latitude}\r\n                lng={longitude}\r\n                txt={ cluster.properties.name}\r\n              >\r\n                <div\r\n                  className=\"cluster-marker\"\r\n                  style={{\r\n                    width: `${10 + (pointCount / points.length) * 20}px`,\r\n                    height: `${10 + (pointCount / points.length) * 20}px`\r\n                  }}\r\n                  onClick={() => {\r\n                    const expansionZoom = Math.min(\r\n                      supercluster.getClusterExpansionZoom(cluster.id),\r\n                      20\r\n                    );\r\n                    mapRef.current.setZoom(expansionZoom);\r\n                    mapRef.current.panTo({ lat: latitude, lng: longitude });\r\n                  }}\r\n                >\r\n                  {pointCount}\r\n                </div>\r\n              </Marker>\r\n            );\r\n          }\r\n\r\n          let marker =\r\n          <Marker\r\n              key={`crime-${cluster.properties.crimeId}`}\r\n              lat={latitude}\r\n              lng={longitude}\r\n          >\r\n            <button onClick={() => handleClick()} className=\"crime-marker\">\r\n              <img src=\"/vote.svg\" alt=\"crime doesn't pay\" />\r\n            </button>\r\n            <LocationPin text={cluster.properties.category} toggle={toggle}/>\r\n          </Marker>\r\n          return marker;\r\n        })}\r\n      </GoogleMapReact>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}